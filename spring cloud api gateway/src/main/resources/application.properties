spring.application.name=gateway

# port where all requests will be coming
server.port=9090

# connect to Eureka
spring.cloud.discovery.enabled=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka, http://localhost2:8762/eureka, http://localhost3:8763/eureka

# Spring Cloud Config
spring.config.import=optional:configserver:http://localhost:8888
# enable/disable cloud config (if disable - comment-out 'spring.config.import' line too)
spring.cloud.config.enabled=true

# rabbitMQ config for Spring Cloud Bus to be able to communicate
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# AUTOMATIC GATEWAY LOCATOR ROUTING - turned off
# automatically maps and routes HTTP requests to destination service if request provided using service name ex.: http://localhost:9090/{registered-service-name}/{url-inside-service}
spring.cloud.gateway.discovery.locator.enabled=false
# to use lower case in URL ex.: http://localhost:9090/users-service/...
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# MANUAL GATEWAY LOCATOR ROUTING

# predicate makes path 'localhost:9090/' access to uri 'localhost:9090/users-service/'
spring.cloud.gateway.routes[0].id=users-home
## registered service name OR api address OR host name
spring.cloud.gateway.routes[0].uri=lb://users-service/
##java8 predicates used to match HTTP request using headers or method and route to destination (its like if statement condition)
spring.cloud.gateway.routes[0].predicates[0]=Path=/
##=GET, POST, PUT, DELETE
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
##filters                                default filter method but we can write our own
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
##spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-service/(?<segment>.*), /${segment}

# user login route
spring.cloud.gateway.routes[1].id=user-signin
spring.cloud.gateway.routes[1].uri=lb://users-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/login
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]= RemoveRequestHeader=Cookie
#remove CORS returned from service called from gateway - gateway adds its own CORS (otherwise duplicate - error: )
#spring.cloud.gateway.routes[1].filters[1]=RemoveRequestHeader= Access-Control-Request-Method
#spring.cloud.gateway.routes[1].filters[2]=RemoveResponseHeader= Access-Control-Request-Method
#spring.cloud.gateway.routes[1].filters[3]=RemoveRequestHeader= Access-Control-Request-Headers
#spring.cloud.gateway.routes[1].filters[4]=RemoveResponseHeader= Access-Control-Request-Headers
#spring.cloud.gateway.routes[1].filters[5]=RemoveRequestHeader= Origin
#spring.cloud.gateway.routes[1].filters[6]=RemoveResponseHeader= Origin

# remove duplicate values of Access-Control-Allow-Credentials and Access-Control-Allow-Origin response headers in cases when both the gateway CORS logic and the downstream add them.
#spring.cloud.gateway.routes[1].filters[1]=DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
# for all - # remove duplicate values of Access-Control-Allow-Credentials and Access-Control-Allow-Origin response headers in cases when both the gateway CORS logic and the downstream add them.
spring.cloud.gateway.default-filters=DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin


# user register route
spring.cloud.gateway.routes[2].id=user-signup
spring.cloud.gateway.routes[2].uri=lb://users-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/register
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie

# get users - needs to have Authorization header
spring.cloud.gateway.routes[3].id=get-users-if-authenticated
# if localhost:9090/users -redirects-to-> (uri) + (predicate_path)
spring.cloud.gateway.routes[3].uri=lb://users-service/
spring.cloud.gateway.routes[3].predicates[0]=Path=/users
spring.cloud.gateway.routes[3].predicates[1]=Method=GET
# make sure request has 'Authorization' header with 'Bearer <...>' value  before routing
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
# rewrite request from localhost:9090/users to localhost:9090/api/v1/users -> gateway will return our 'user-service/api/v1/users'
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/users, /api/v1/users

# user get access token from refresh token route
spring.cloud.gateway.routes[4].id=user-get-access-token
spring.cloud.gateway.routes[4].uri=lb://users-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/resettoken
spring.cloud.gateway.routes[4].predicates[1]=Method=POST
spring.cloud.gateway.routes[4].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie

# user get user by publicID route
spring.cloud.gateway.routes[5].id=users-get-user-by-publicID
spring.cloud.gateway.routes[5].uri=lb://users-service
spring.cloud.gateway.routes[5].predicates[0]=Path=/users/**
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.routes[5].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[5].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[5].filters[1]=RewritePath=/users/(?<segment>.*), /api/v1/users/${segment}

# Package(Parcel) service

# get all packages
spring.cloud.gateway.routes[6].id=get-all-parcels
spring.cloud.gateway.routes[6].uri=lb://packages-service
spring.cloud.gateway.routes[6].predicates[0]=Path=/parcels
spring.cloud.gateway.routes[6].predicates[1]=Method=GET
#spring.cloud.gateway.routes[6].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[6].filters[0]=RemoveRequestHeader=Cookie

# package tracking
spring.cloud.gateway.routes[7].id=get-package-by-trackingNumber
spring.cloud.gateway.routes[7].uri=lb://packages-service
spring.cloud.gateway.routes[7].predicates[0]=Path=/tracking/**
spring.cloud.gateway.routes[7].predicates[1]=Method=GET
#spring.cloud.gateway.routes[7].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[7].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[7].filters[1]=RewritePath=/tracking/(?<segment>.*), /parcels/${segment}

# submit new package
spring.cloud.gateway.routes[8].id=submit-new-package
spring.cloud.gateway.routes[8].uri=lb://packages-service
spring.cloud.gateway.routes[8].predicates[0]=Path=/new
spring.cloud.gateway.routes[8].predicates[1]=Method=POST
#spring.cloud.gateway.routes[8].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[8].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[8].filters[1]=RewritePath=/new, /parcels/submitNewPackage

# get parcels count
spring.cloud.gateway.routes[9].id=submit-new-package
spring.cloud.gateway.routes[9].uri=lb://packages-service
spring.cloud.gateway.routes[9].predicates[0]=Path=/packages/count
spring.cloud.gateway.routes[9].predicates[1]=Method=GET
#spring.cloud.gateway.routes[9].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[9].filters[0]=RemoveRequestHeader=Cookie
#spring.cloud.gateway.routes[9].filters[1]=RewritePath=/new, /parcels/submitNewPackage


# trace gateway logs
#logging.level.org.springframework.cloud.gateway= DEBUG
#logging.level.reactor.netty.http.client= DEBUG

# quick CORS config without configuration classes
#spring.cloud.gateway.globalcors.corsConfigurations.'[/**]'.allowed-origins=http://localhost:4200
#spring.cloud.gateway.globalcors.corsConfigurations.'[/**]'.allowed-methods=GET, POST
#spring.cloud.gateway.globalcors.corsConfigurations.'[/**]'.exposed-headers='A'
#spring:
#  cloud:
#    gateway:
#      globalcors:
#        corsConfigurations:
#          '[/**]':
#            allowedOrigins: "https://docs.spring.io"
#            allowedMethods:
#            - GET