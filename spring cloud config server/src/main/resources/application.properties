server.port=8888
spring.application.name=config-service

# where we getting information from
#spring.cloud.config.server.git.uri=git@github.com:MindaugasJasiunas/spring-cloud-config-repo.git
spring.cloud.config.server.git.uri=https://github.com/MindaugasJasiunas/spring-cloud-config-repository/
#provide if login is needed (password will be generated token in Github):
spring.cloud.config.server.git.username=MindaugasJasiunas
spring.cloud.config.server.git.password=${ENV_GITHUB_PERSONAL_ACCESS_TOKEN}
#provide branch to get from
spring.cloud.config.server.git.default-label=main
#spring.cloud.config.label=main
#clone repo when we start
spring.cloud.config.server.git.clone-on-start=true

#spring.cloud.config.server.git.strict-host-key-checking=false
#spring.cloud.config.server.git.skip-ssl-validation=true

#set logging
logging.level.org.springframework.cloud=debug
logging.level.org.springframework.web=debug

# look into own application folder for configuration
spring.cloud.config.server.git.search-paths={application}

#enable actuator endpoint to POST request that triggers refresh of application configuration
management.endpoints.web.exposure.include=bus-refresh

# rabbitMQ config for Spring Cloud Bus to be able to communicate
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest