<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.3-SNAPSHOT</version>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2021.0.3</spring-cloud.version>
		<axon-spring-boot-starter.version>4.5.14</axon-spring-boot-starter.version>
		<axon-reactor-spring-boot-starter.version>4.5.1</axon-reactor-spring-boot-starter.version>
		<google.guava.version>31.1-jre</google.guava.version>
		<feign-jackson.version>11.9.1</feign-jackson.version>
		<jackson-bom.version>2.13.2</jackson-bom.version>
		<feign-reactor.version>3.2.3</feign-reactor.version>
		<common.version>5.0-SNAPSHOT</common.version>
		<logstash-logback-encoder.version>7.2</logstash-logback-encoder.version>
		<fabric8-docker-maven-plugin.version>0.33.0</fabric8-docker-maven-plugin.version>

		<!-- docker info: 'mindaugasjasiunas/demo' -->
		<docker.image.prefix>mindaugasjasiunas</docker.image.prefix>
		<docker.image.name>${project.artifactId}</docker.image.name>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Eureka Client -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!-- Spring Cloud Config Client -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<!-- Spring Cloud Bus -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bus-amqp</artifactId>
		</dependency>

		<!-- Reactive MongoDB & Spring Data Reactive MongoDB -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
		</dependency>
		<!--<dependency>
			<groupId>de.flapdoodle.embed</groupId>
			<artifactId>de.flapdoodle.embed.mongo</artifactId>
			<scope>test</scope>
		</dependency>-->

		<!-- Axon Framework -->
		<dependency>
			<groupId>org.axonframework</groupId>
			<artifactId>axon-spring-boot-starter</artifactId>
			<version>${axon-spring-boot-starter.version}</version>
		</dependency>
		<!-- Axon Framework reactive support -->
		<dependency>
			<groupId>org.axonframework.extensions.reactor</groupId>
			<artifactId>axon-reactor-spring-boot-starter</artifactId>
			<version>${axon-reactor-spring-boot-starter.version}</version>
		</dependency>

		<!-- Google Guava dependency (Maven required it when Axon is used with Spring Cloud (Axon doesn't use this dependency) -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${google.guava.version}</version>
		</dependency>

		<!-- Reactive Feign Client -->
		<dependency>
			<groupId>com.playtika.reactivefeign</groupId>
			<artifactId>feign-reactor-spring-cloud-starter</artifactId>
			<version>${feign-reactor.version}</version>
			<type>pom</type>
		</dependency>
		<!--<dependency>
			<groupId>com.playtika.reactivefeign</groupId>
			<artifactId>feign-reactor-webclient</artifactId>
			<version>${feign-reactor.version}</version>
		</dependency>
		<dependency>
			<groupId>com.playtika.reactivefeign</groupId>
			<artifactId>feign-reactor-cloud</artifactId>
			<version>${feign-reactor.version}</version>
		</dependency>
		<dependency>
			<groupId>com.playtika.reactivefeign</groupId>
			<artifactId>feign-reactor-spring-configuration</artifactId>
			<version>${feign-reactor.version}</version>
		</dependency>
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-slf4j</artifactId>
			<version>11.8</version>
		</dependency>-->

		<!-- For Jackson Decoder & Encoder in Feign Configuration (by default Webflux doesn't support Feign) -->
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId> feign-jackson </artifactId>
			<version>${feign-jackson.version}</version>
		</dependency>

		<!-- For Feign : An exception was thrown by the remote message handling component: Java 8 date/time type `java.time.LocalDateTime` not supported by default -->
		<!--	Parameter names	-->
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId> jackson-module-parameter-names </artifactId>
		</dependency>
		<!--	Java 8 Date/time	-->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId> jackson-datatype-jsr310 </artifactId>
		</dependency>
		<!--	Java 8 Datatypes	-->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId> jackson-datatype-jdk8 </artifactId>
		</dependency>


		<!-- Resilience4J Circuit Breaker (Hystrix deprecated) -->
		<!-- 'spring-cloud-starter-circuitbreaker-resilience4j' for spring webmvc, 'spring-cloud-starter-circuitbreaker-reactor-resilience4j' for webflux -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
		</dependency>

		<!-- our common service -->
		<dependency>
			<groupId>org.example</groupId>
			<artifactId>common</artifactId>
			<version>${common.version}</version>
		</dependency>

		<!-- for custom logging - for Logstash Encoder -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>${logstash-logback-encoder.version}</version>
		</dependency>

    </dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson</groupId>
				<artifactId> jackson-bom </artifactId>
				<version>${jackson-bom.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
					<!-- Configure Spring Boot for layered jars (for docker'izing) -->
					<layers>
						<enabled>true</enabled>
						<includeLayerTools>true</includeLayerTools>
					</layers>
				</configuration>
			</plugin>

			<!-- Plugin to docker'ize application -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${fabric8-docker-maven-plugin.version}</version>
				<configuration>
					<!-- should auto-detect it -->
					<!-- <dockerHost>http://127.0.0.1:2375</dockerHost> for Windows -->
					<!-- <dockerHost>unix:///var/ruh/docker.sock</dockerHost> for UNIX -->
					<verbose>true</verbose>
					<images>
						<image>
							<name>${docker.image.prefix}/${docker.image.name}</name>
							<alias>${project.artifactId}</alias>
							<build>
								<!-- copies artifact to docker build dir in target -->
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<dockerFile>Dockerfile</dockerFile>
								<tags>
									<tag>latest</tag>
									<tag>${project.version}</tag>
								</tags>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
