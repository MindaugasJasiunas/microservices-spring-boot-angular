version: '3.8'
services:
  rabbitMQ:
    image: rabbitmq:3-management
    container_name: rabbitmq-spring-cloud-config-server
    ports:
      - 5672:5672
      - 15672:15672
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - ourNetwork

  mongoDB:
    image: mongo
    container_name: reactive-packages-service-mongoDB
    ports:
      - 27017:27017
#      - '27017-27019:27017-27019'
#    volumes:
#      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro # initial script (executes only if /data/db is empty in container - never empty = never executes
#      - ~/home/workstation/dockerstorage/mongodbstorage:/data/db
    restart: always
    environment:
      MONGO_INITDB_DATABASE: packagesservicedb
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootroot
    networks:
      - ourNetwork

  # Database Manager
#  mongo-express:
#    image: mongo-express
#    ports:
#      - 8099:8081
#    depends_on:
#      - mongo
#    environment:
#      ME_CONFIG_BASICAUTH_USERNAME: express
#      ME_CONFIG_BASICAUTH_PASSWORD: 123456
#      ME_CONFIG_MONGODB_PORT: 27017
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: rootroot
#    links:
#      - mongoDB

  axonFramework:
    image: axoniq/axonserver
    container_name: axon-framework
    ports:
      - 8024:8024
      - 8124:8124
    volumes:
      - /home/linuxmachine/dockerstorage/axon-docker/data:/data
      - /home/linuxmachine/dockerstorage/axon-docker/eventdata:/eventdata
      - /home/linuxmachine/dockerstorage/axon-docker/config:/config
    environment:
      AXONIQ_AXONSERVER_NAME: Axon Server
      AXONIQ_AXONSERVER_HOSTNAME: localhost
      SERVER_PORT: 8024
      AXONIQ_AXONSERVER_DEVMODE_ENABLED: true #enable Axon Server to start up in development mode - it enables RESET button in dashboard. It can be used to clear the Event Store storage
    networks:
      - ourNetwork

  eureka-1:
    image: mindaugasjasiunas/eureka-server
    container_name: eureka1
    environment:
      server.port: 8761
      eureka.instance.hostname: eureka-1
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      spring.rabbitmq.host: rabbitMQ
    ports:
      - 8761:8761
    networks:
      - ourNetwork

  eureka-2:
    image: mindaugasjasiunas/eureka-server
    container_name: eureka2
    environment:
      server.port: 8762
      eureka.instance.hostname: eureka-2
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      spring.rabbitmq.host: rabbitMQ
    ports:
      - 8762:8762
    networks:
      - ourNetwork

  packages-app:
    image: mindaugasjasiunas/packages-service
    container_name: packages-app
    environment:
      PORT: 8080
      spring.data.mongodb.uri: mongodb://root:rootroot@mongoDB:27017/packagesservicedb?authSource=admin&retryWrites=true&w=majority
      axon.axonserver.servers: axonFramework:8124
      spring.rabbitmq.host: rabbitMQ
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      eureka.instance.prefer-ip-address: true # to ignore 'eureka.instance.hostname=localhost' in application.properties & to get routed in Spring Cloud API Gateway
    ports:
      - 8080:8080
    depends_on:
      - axonFramework
      - mongoDB
      - rabbitMQ
    networks:
      - ourNetwork

  delivery-app:
    image: mindaugasjasiunas/delivery-service
    container_name: delivery-app
    environment:
      PORT: 8081
      axon.axonserver.servers: axonFramework:8124
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      eureka.instance.prefer-ip-address: true # to ignore 'eureka.instance.hostname=localhost' in application.properties & to get routed in Spring Cloud API Gateway
    ports:
      - 8081:8081
    depends_on:
      - packages-app
    networks:
      - ourNetwork

  payment-app:
    image: mindaugasjasiunas/payment-service
    container_name: payment-app
    environment:
      PORT: 8082
      axon.axonserver.servers: axonFramework:8124
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      eureka.instance.prefer-ip-address: true # to ignore 'eureka.instance.hostname=localhost' in application.properties & to get routed in Spring Cloud API Gateway
    ports:
      - 8082:8082
    depends_on:
      - packages-app
    networks:
      - ourNetwork

  postgreSQL:
    image: postgres
    container_name: postreSQL-ourUserDB
    ports:
      - 5432:5432
      - 49153:49153
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: rootroot
      POSTGRES_DB: ouruserdb
  #    volumes:
  #      - /home/linuxmachine/postgrestorage:/var/lib/postgresql/data
    networks:
      - ourNetwork

  #  adminer:
  #    image: adminer
  #    restart: always
  #    ports:
  #      - 8080:8080

  users-service:
    image: mindaugasjasiunas/users-service
    container_name: users-service
    ports:
      - 8083:8083
    restart: always
    environment:
      PORT: 8083
      spring.r2dbc.url: r2dbc:postgresql://postgreSQL:5432/ouruserdb
      spring.rabbitmq.host: rabbitMQ
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      eureka.instance.prefer-ip-address: true # to ignore 'eureka.instance.hostname=localhost' in application.properties & to get routed in Spring Cloud API Gateway
    networks:
      - ourNetwork
    depends_on:
      - postgreSQL

  api-gateway:
    image: mindaugasjasiunas/api-gateway
    container_name: api-gateway
    ports:
      - 9090:9090
    environment:
      SPRING_PROFILES_ACTIVE: local
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
      spring.rabbitmq.host: rabbitMQ
      # we can define routes here (overrides all that is configured in properties)
#      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: users-home-additional
#      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: lb://users-service/
#      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path=/home-sweet-home
#      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[1]: Method=GET
#      SPRING_CLOUD_GATEWAY_ROUTES[0]_FILTERS[0]: RemoveRequestHeader=Cookie
#      SPRING_CLOUD_GATEWAY_ROUTES[0]_FILTERS[1]: RewritePath=/home-sweet-home, /
    networks:
      - ourNetwork
    restart: always
    depends_on:
      - eureka-1
      - eureka-2

  parcel-frontend:
    image: parcel-frontend-image
    container_name: parcel-frontend
    ports:
      - 8088:80
    networks:
      - ourNetwork
    environment:
      API_URL: http://172.17.0.1:9090/
#      API_LOGIN_URL: http://api-gateway:9090/login # net::ERR_NAME_NOT_RESOLVED
#      API_LOGIN_URL: http://docker.host.internal:9090/login # net::ERR_NAME_NOT_RESOLVED
      API_LOGIN_URL: http://172.17.0.1:9090/login
      API_REGISTER_URL: http://172.17.0.1:9090/register
      API_REFRESH_URL: http://172.17.0.1:9090/resettoken
      API_PACKAGES_URL: http://172.17.0.1:9090/parcels
      API_PACKAGE_TRACKING_URL: http://172.17.0.1:9090/tracking/
      API_CREATE_PACKAGE_URL: http://172.17.0.1:9090/new

  courier-frontend:
    image: courier-frontend-image
    container_name: courier-frontend
    ports:
      - 8099:80
    networks:
      - ourNetwork
    environment:
      API_URL: http://172.17.0.1:9090/
      #      API_LOGIN_URL: http://api-gateway:9090/login # net::ERR_NAME_NOT_RESOLVED
      #      API_LOGIN_URL: http://docker.host.internal:9090/login # net::ERR_NAME_NOT_RESOLVED
      API_LOGIN_URL: http://172.17.0.1:9090/login
      API_REFRESH_URL: http://172.17.0.1:9090/resettoken
      API_PACKAGES_URL: http://172.17.0.1:9090/parcels
      API_PACKAGES_COUNT_URL: http://172.17.0.1:9090/new

networks:
  ourNetwork:
    driver: bridge
