version: '3.8'
services:
  rabbitMQ: # Spring Cloud Config already has it. duplication.
    image: rabbitmq:3-management
    container_name: rabbitmq-spring-cloud-config-server
    ports:
      - 5672:5672
      - 15672:15672
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - ourNetwork

  mongoDB:
    image: mongo
    container_name: reactive-packages-service-mongoDB
    ports:
      - 27017:27017
#      - '27017-27019:27017-27019'
#    volumes:
#      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro # initial script (executes only if /data/db is empty in container - never empty = never executes
#      - ~/home/workstation/dockerstorage/mongodbstorage:/data/db
    restart: always
    environment:
      MONGO_INITDB_DATABASE: packagesservicedb
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootroot
    networks:
      - ourNetwork

  # Database Manager
#  mongo-express:
#    image: mongo-express
#    ports:
#      - 8099:8081
#    depends_on:
#      - mongo
#    environment:
#      ME_CONFIG_BASICAUTH_USERNAME: express
#      ME_CONFIG_BASICAUTH_PASSWORD: 123456
#      ME_CONFIG_MONGODB_PORT: 27017
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: rootroot
#    links:
#      - mongoDB

  axonFramework:
    image: axoniq/axonserver
    container_name: axon-framework
    ports:
      - 8024:8024
      - 8124:8124
    volumes:
      - /home/linuxmachine/dockerstorage/axon-docker/data:/data
      - /home/linuxmachine/dockerstorage/axon-docker/eventdata:/eventdata
      - /home/linuxmachine/dockerstorage/axon-docker/config:/config
    environment:
      AXONIQ_AXONSERVER_NAME: Axon Server
      AXONIQ_AXONSERVER_HOSTNAME: localhost
      SERVER_PORT: 8024
      AXONIQ_AXONSERVER_DEVMODE_ENABLED: true #enable Axon Server to start up in development mode - it enables RESET button in dashboard. It can be used to clear the Event Store storage
    networks:
      - ourNetwork

  eureka-1:
    image: mindaugasjasiunas/eureka-server
    container_name: eureka1
    environment:
      server.port: 8761
      eureka.instance.hostname: eureka-1
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
    ports:
      - 8761:8761
    networks:
      - ourNetwork

  eureka-2:
    image: mindaugasjasiunas/eureka-server
    container_name: eureka2
    environment:
      server.port: 8762
      eureka.instance.hostname: eureka-2
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
    ports:
      - 8762:8762
    networks:
      - ourNetwork

  packages-app:
    image: mindaugasjasiunas/demo
    container_name: packages-app
    environment:
      PORT: 8080
      spring.data.mongodb.uri: mongodb://root:rootroot@mongoDB:27017/packagesservicedb?authSource=admin&retryWrites=true&w=majority
      axon.axonserver.servers: axonFramework:8124
      spring.rabbitmq.host: rabbitMQ
      eureka.client.service-url.defaultZone: http://eureka-1:8761/eureka, http://eureka-2:8762/eureka
#      eureka.instance.hostname: localhost
    ports:
      - 8080:8080
    depends_on:
      - axonFramework
      - mongoDB
      - rabbitMQ
    networks:
      - ourNetwork

networks:
  ourNetwork:
    driver: bridge
